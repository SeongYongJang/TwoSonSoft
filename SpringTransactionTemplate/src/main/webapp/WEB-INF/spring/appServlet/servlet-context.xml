<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:aop="http://www.springframework.org/schema/aop"

	
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
	<!-- //////////////////////////////////////////////////////// -->
	<!-- 트랜잭션 설정 -->
	<!-- //////////////////////////////////////////////////////// -->
	<!-- @Transactional 을 이용한 세팅 -->
	<tx:annotation-driven proxy-target-class="true" transaction-manager="transactionManager1"/>
	
	<!-- AOP advice 를 이용한 세팅 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager1">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="insert*" propagation="REQUIRED" isolation="READ_COMMITTED" rollback-for="RuntimeException"/>
			<tx:method name="update*" propagation="REQUIRED" isolation="READ_COMMITTED" rollback-for="RuntimeException"/>
			<tx:method name="delete*" propagation="REQUIRED" isolation="READ_COMMITTED" rollback-for="RuntimeException"/>
		</tx:attributes>
	</tx:advice>

	<aop:config proxy-target-class="true">
		<aop:pointcut id="txAdvicePointCut" expression="execution(* com.twosonsoft..dao..*.*(..))" />
		<aop:advisor id="transactionAdvisor" pointcut-ref="txAdvicePointCut" advice-ref="txAdvice"/>
	
	</aop:config>
	<!-- //////////////////////////////////////////////////////// -->
	

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<!--데이터 베이스 설정 -->
	<!-- /////////////////////////////////////////////////////////////////////// -->
	<!-- DataSource Transaction Manager Setting Group -->
	<!-- dbcp -->
<!-- 	<beans:bean id="dataSource1" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<beans:property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<beans:property name="url" value="${jdbc.url}" />
		<beans:property name="username" value="${jdbc.username}" />
		<beans:property name="password" value="${jdbc.password}" />
	</beans:bean>
 -->
 	<!-- JNDI 로 설정 변경 -->
 	<beans:bean id="dataSource1" class="org.springframework.jndi.JndiObjectFactoryBean">
		<beans:property name="jndiName" value="java:/comp/env/jdbc/MySQLDS" />

	</beans:bean>


	<beans:bean id="transactionManager1"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="dataSource1" />
	</beans:bean>

	<!-- mybatis sql session factory -->
	<beans:bean id="sqlFactory1" class="com.twosonsoft.opensource.comp.ReloadableSqlMapper">
		<beans:property name="dataSource" ref="dataSource1" />
		<beans:property name="beanName" value="sqlFactory1" />
		<beans:property name="mapperLocations" value="classpath:sqlMapper/**/*.xml" />
	</beans:bean>
	<!-- mybatis sql session -->
	<beans:bean id="sqlSession1" class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg index="0" ref="sqlFactory1" />
	</beans:bean>
	<!-- ////////////////////////////////////////////////////////////////////// -->
	<!-- Create Working DAO -->
	<beans:bean id="daoMemberInfo_DataSourceTransaction" class="com.twosonsoft.pilot.dao.DaoMemberInfo">
		<beans:property name="sqlSession" ref = "sqlSession1" />
	</beans:bean>
	<beans:bean id="daoTemp_DataSourceTransaction" class="com.twosonsoft.pilot.dao.DaoTemp">
		<beans:property name="sqlSession" ref = "sqlSession1" />
	</beans:bean>
		
	<context:component-scan base-package="com.twosonsoft.pilot" />
	
	
	<beans:beans profile="local">
		<context:property-placeholder location="/WEB-INF/spring/property/local/*.properties" />
	</beans:beans>
	<beans:beans profile="dev">
		<context:property-placeholder location="/WEB-INF/spring/property/dev/*.properties" />
	</beans:beans>
	<beans:beans profile="stg">
		<context:property-placeholder location="/WEB-INF/spring/property/stg/*.properties" />
	</beans:beans> 
	
</beans:beans>
